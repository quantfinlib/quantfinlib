name: test workflow

on:
  push:
    branches: 
      - main
      - 'feature-*'
  pull_request:
    branches: [main]
  release:
    types:
      - published

jobs:
  # Run tests
  tests:
    name: "py${{ matrix.python-version }} / ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      # Clone the repository
      - name: Clone the repository
        uses: actions/checkout@v4
      # Setup python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with: 
          python-version: ${{ matrix.python-version }}
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false --local
          poetry install --with test
      # Run tests
      - name: test with pytest
        run: |
          poetry run pytest --cov=quantfinlib --cov-branch --cov-report=term-missing --cov-report=xml:coverage.xml -vv tests
        # Publish test coverage with coveralls
      - name: Code coverage with coveralls
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.COVERALL_TOKEN }}
          path-to-lcov: coverage.xml
  
  # Run flake8
  flake8:
    runs-on: ubuntu-latest
    steps:
      # Clone the repository
      - name: Checkout the quantfinlib repository
        uses: actions/checkout@v4
      # Run flake8
      - name: Lint
        uses: py-actions/flake8@v2
        with:
          args: "--config .flake8"
      
  # build wheel and deploy to pypi
  deploy:
    # Needs tests to be run successfully before deploying
    needs: [tests, flake8]
    runs-on: ubuntu-latest
    # Run only if there is a published release
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          pip install build
      - name: Build and Publish package
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_API_TOKEN
          poetry build
          poetry publish
